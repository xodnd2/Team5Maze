(1 슬라이드 열어놓고)

아, 발표 시작하겠습니다.

안녕하세요,
저희는 강태웅, 오승철, 오하림, 유동재 로 이루어진 5조이고, 저는 발표를 맡게된 오승철 학생입니다.
저희는 이번에 연결리스트로 큐와 스택을 구현하여 이를 통하여 미로 찾기 프로그램을 만들어보았습니다.

그럼 먼저 발표순서에 대해 간략하게 말씀드리는 것으로 발표를 시작하도록 하겠습니다.

(2 슬라이드로 이동)

우선 첫번째 순서로는 스택을 사용해 구현할 수 있는 깊이 우선 탐색에 대해서 간략하게 설명드린후,
이를 미로 탐색에 실제로 적용시킨 저희가 구현한 프로그램을 시연해드릴것이고,

두번째로는 큐를 사용해 구현 가능한 너비 우선 탐색에 대해 간략하게 설명 드린 후,
마찬가지로 저희가 만든 프로그램을 시연하며 이를 실제로 보여드리겠습니다.

세번째로는 저희가 미로 탐색 프로그램에서 추가적으로 구현해본 추가기능에 대하여 간략한 설명을
드린 후 이를 실제로 보여드릴 것이고,

마지막으로는 깊이 우선 스택과 너비 우선 탐색, 즉 스택과 큐 중 어느 것을 사용하여 미로 탐색을 구현하는 것이
더 효율적인 탐색 방식인지에 대하여 저희가 추가적인 기능으로서 넣은 랜덤 미로 출력을 예시로 삼아 고찰해보는 것으로
발표를 마치겠습니다.

(3 슬라이드로 이동)

그럼 말씀드린대로 깊이 우선 탐색부터 시작하겠습니다.

깊이 우선 탐색은 루트 노드에서 시작해서 다음 분기로 넘어가기 전에 해당 분기를 완벽하게 탐색하는 방식을 의미합니다.
또한 깊이 우선 탐색은 주로 재귀함수나 스택을 사용하여 구현되는데, 저희는 당연히 

(4슬라이드로 이동)

스택을 사용하여 구현하였습니다.

그럼 저희가 작성한 프로그램을 사용하여 깊이 우선 탐색 방식으로 미로에서 길을 찾는 모습을 실제로 보여드리겠습니다.

미로는 교수님께서 주신 미로 파일을 파일 입출력 기능을 사용하여 입력받았습니다.

(비주얼 스튜디오 실행 후 교수님이 주신 미로를 (2.스택)으로 실행)

먼저 프로그램을 실행시키면 세가지의 선택지가 주어지는데 저희는 교수님이 주신 파일을 이용할 것이므로 1번,
파일 입출력 이용을 입력하겠습니다.

(cmd에서 1 입력하고 엔터)

또다시 여러가지 선택지가 나오는데 저희는 깊이 우선 탐색 방식으로 미로에서 길을 찾는 모습이 보고싶은것이기 때문에,
2번, 스택 미로탐색을 눌러야 합니다.

(cmd에서 2 입력하고 엔터)

2번을 입력한다면 미로가 나타나는데 미로에서,
온천 모양의 표시가 루트 노드, 즉 시작점을 의미하고, 하얀 네모가 벽, 텅 빈 네모는 길을 의미합니다.

이제 엔터를 누를때마다 시작점에서부터 시작해 깊이 우선 탐색으로 한칸씩 움직이며 길을 찾는 것을 볼 수 있는데,

(엔터를 몇번 눌러서 음표가 나오면, 음표의 의미를 설명하자)

여기서 음표 모양이 뜨는것이 탐색을 했다는 것을 의미합니다.

깊이 우선 탐색의 알고리즘이 적용되었기에 갈림길이 나오면 길 하나를 선택하고,
막히는 곳이 없으면 있을때까지 계속 진행하는 모습을 볼 수 있습니다.

미로를 탈출할때까지 엔터를 누르면,

(cmd에서 엔터 계속 눌러서 탈출)

스택 미로 탐색 성공이라고 뜨며 탐색 과정에서 이동한 경로와 총 이동횟수가 출력되는 것을 볼 수 있습니다.

그럼 다시 발표 자료로 돌아와서

(cmd 창은 닫지 말고, 파워포인트 창 띄워서 5번째 슬라이드로 이동)

이번에는 너비 우선 탐색에 대해서 간략하게 설명드린후 이를 프로그램을 통하여 실제로 보여드리겠습니다.

너비 우선 탐색은 루트 노드에서 시작해서,
가까운 노드를 먼저 방문하고 멀리 떨어져있는 정점을 나중에 방문하는 방식을 가진 탐색 방법입니다. 

이러한 너비 우선 탐색은 큐를 통하여 구현이 되는데,

(6 슬라이드로 이동)

이것은 저희의 프로그램을 통하여 실제로 보여드리겠습니다.

(아까 안닫은 cmd 창열고 3번 큐 미로 탐색 입력)

아까와 마찬가지로 미로가 나타나면 엔터를 눌러,
큐를 사용하여 구현된 너비 우선 탐색의 방식으로 길을 찾아가는 모습을 시각적으로 보실 수 있으실것입니다.

스택으로 구현했던 깊이 우선 탐색과의 확연한 차이점이라면,

(엔터를 누르며 보여주자)

너비 우선 탐색은 깊이 우선 탐색처럼 갈림길을 만났을 때 어느 한 방향을 선택하여 이를 끝까지 파고드는 것이 아니라,
탐색 가능한 모든 방향을, 즉 갈림길에서는 두가지 방향을 모두 선택하여 이를 한 단계씩 진행하는 방식이라는 점입니다.

(엔터 끝까지 눌러서 탈출)

아까와 동일하게 탈출구를 찾으면 큐 미로 탐색 성공이라는 텍스트가 출력되며 탐색과정에서 이동한 경로와 총 이동횟수가 출력됩니다.

(다시 파워포인트 창 띄우고)

지금까지는 저희가 깊이 우선 탐색과 너비 우선 탐색을,
각각 스택과 큐를 이용하여 구현한 결과물들을 간략한 설명과 함께 보여드렸습니다.

(7 슬라이드로 이동)

다음으로는 저희가 추가적으로 프로그램 속에 삽인한 기능인 랜덤 미로 출력기능에 대하여 설명드려보겠습니다.

이 기능은 순수하게 저희 힘으로만 구현한 것은 아니고, 오픈소스를 참조하였습니다.

더 자세한 기능에 대한 설명은 직접 프로그램을 실행시키면서 보여드리겠습니다.

(cmd창 열려있으면 닫고 다시 실행하거나 뒤로가기 눌러서 첫 화면으로 이동)

프로그램을 처음 실행시키면 2번에 랜덤 미로라는 선택지가 있는것을 볼 수 있는데, 2번을 입력하시면 이 기능이 실행됩니다.

기능을 실행시키면 텍스트 파일을 입력받았을때와 마찬가지로 탐색 방식을 고를 수 있는 선택지가 나타나는데,
1번, 스택과 큐 모두의 방식으로 미로를 탐색하는 선택지를 실행시켜보겠습니다.

이 선택지를 실행시키면 먼저 스택 방식으로 미로를 탐색하고, 탐색이 끝나면, 
큐 방식으로 미로를 탐색하는 모습을 보실수 있으실 겁니다.

두 가지 방식으로의 탐색이 끝나면
모두의 결과가 화면에 동시에 출력되게 됩니다. 

(다시 피피티 키고 8 슬라이드로 이동)

그러나 저희 프로그램 상에서 구현된 랜덤 미로 출력 기능에는 한계점이 존재합니다. 
그 한계점이란,

(9 슬라이드로 이동)

코드 상에서 너비와 높이를 홀수가 아닌 짝수로 설정한다면 탈출구가 다른 곳에 생성되거나,
탈출구가 없는 미로가 생성되어 미로 탐색에 실패하게 된다는 점입니다.

(10 슬라이드로 이동)

이러한 현상이 일어나는 이유에 대해서 설명드리자면,
저희는 미로를 미로의 모든 요소를 벽으로 만든 후,
가장가지를 제외한 곳들을 빈칸으로 만들며 길을 뚫어가는 방식으로 구현했습니다.

그러나 너비와 높이가 짝수로 설정이 된다면,
뚫는 과정에서 불일치가 일어나 예상 밖의 사태가 일어나게 되는 것을 디버깅 과정에서 발견하게 되었습니다.

(11 슬라이드로 이동)

마지막으로, 두가지 탐색 방식을 비교해보며, 어느 것이 더 효율적인지에 대하여 말씀드리겠습니다.

결론부터 이야기하자면 '어떤 것이 더 좋은 탐색 방식이다' 라고는 정의내릴 수 없습니다.

먼저 탈출구로 가는 경로가 여러가지 존재하는 미로에서 최단거리를 구하는 상황에서는 너비 우선 탐색이 더 유리합니다.

왜냐하면 깊이 우선 탐색으로 경로를 찾을 때는 처음으로 발견되는 해가 최단거리가 아닐수도 있지만,
너비 우선 탐색으로는 시작점에서부터 가까운 곳부터 찾기 때문에 경로를 탐색 시 먼저 찾아지는 해답이 곧 최단거리이기 때문입니다.

(12 슬라이드로 이동)

그러나 저희가 구현한 프로그램을 게속 돌려보니, 대다수의 결과에서

(13, 14, 15, 슬라이드 차례대로 보여주다가 15 슬라이드에서 멈추기)

항상 그런 것은 아니나,
깊이 우선 탐색쪽, 즉 스택 쪽이 큐보다 더 적은 횟수로 탈출구를 찾는 경우가 더 빈번했습니다.

(16 슬라이드로 이동)

왜 이러한 결과가 나타나는 지에 대해 고찰해본 결과,

(17 슬라이드로 이동)

저희가 구현한 프로그램에서의 랜덤 미로는 탈출구까지 가는 유일한 경로가 오직 한가지 뿐이 존재하지 않았기 때문이었습니다.
즉 저희 프로그램 속의 미로에서는 유일한 탈출 경로가 곧 최단경로였기 때문에 이러한 결과가 나타나는 것이었습니다.

(18 슬라이드로 이동)

고로 일반적으로 탈출경로가 여러가지 존재하는 미로에서 최단경로를 찾을 때는 너비 우선 탐색이 유리하나,
저희가 구현한 프로그램 속에서의 미로와 같이,
탈출경로가 한가지 밖에 존재하지 않는 경우에는 깊이 우선 탐색이 대개의 경우에서 더 유리하다는 것을 알게 되었습니다.

(19 슬라이드로 이동)

또한 깊이 우선 탐색은 속도는 조금 느리나,
너비 우선 탐색이 검색 속도는 빠르나 경로가 길어질 수록,
다음에 탐색할 노드, 즉 자식 노드의 데이터를 더 많이 저장해야하기 때문에 많은 메모리를 요구한다는 단점을 가진 반면에,
비교적 적은 메모리를 사용한다는 장점을 가지고 있기도 합니다.

즉, 이와 같이 어떤 방식의 탐색이 더 좋다고 말하는 것은 불가능하고,
그 상황에 따라서 더욱 알맞는 탐색 방법을 사용하여 코드를 작성하는 능력이 프로그래머에게 크게 요구될 것입니다.

(20 슬라이드로 이동)

프로젝트를 진행하며 한가지 아쉬웠던 점이 오픈소스를 활용하여 프로그램에 적용은 시켰으나,
이를 완벽하게 이해는 하지 못해, 한계점을 극복해내지 못한점입니다.

이와 같이 미쳐 해결하지 못한 프로그램 내의 한계점을,
추후에 코드를 수정하여 해결해보는 것도 실력향상에 큰 도움이 될 것 같습니다.

그럼 이상이 저희 5조의 미로 탐색 프로젝트 였습니다.

지금까지 발표를 들어주셔서 감사하고 이상으로 발표를 마치겠습니다.